
<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE configuration

PUBLIC "-//mybatis.org//DTD Config 3.0//EN"

"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	<!-- 元素首次出现必须符合下面的顺序 -->
	<!-- (properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?) -->
	<!-- 加载常量配置信息 -->
	<!-- 可以覆盖重写，用于解密-http://www.mybatis.org/mybatis-3/zh/configuration.html
		·在 properties 元素体内指定的属性首先被读取。
		·然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。
		·最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。 -->
	<properties resource="config/db.properties"/>
	<!-- 为实体类定义别名 -->
	<!-- <typeAliases>
		<typeAlias alias="userModel"  type="com.bestcxx.stu.springmvc.model.UserModel"/>
		<typeAlias alias="userModelTwo"  type="com.bestcxx.stu.springmvc.model.UserModelTwo"/>
	</typeAliases> -->

	<!-- 使用 spring 配置数据库的时候，下面就可以注释掉了 -->
	<!-- 定义数据库信息，默认使用 development 数据库构建环境 -->
	<environments default="development">
		<environment id="development">
			<!-- 采用 jdbc 事务管理 -->
			<transactionManager type="JDBC"/>
			<!-- 配置数据库链接信息 -->
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driverClassName}"/>
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
	</environments>
	<!-- 定义映射器 -->
	<mappers>
		<!-- 使用这个方案，可以单独指定Mapper的位置 -->
		<!-- <mapper resource="mybatis/mappings/UserModelMapper.xml"/>
		<mapper resource="mybatis/mappings/UserModelTwoMapper.xml"/> -->
		<!-- 使用下面两个个方法，Mapper.xml 文件位置必须在和其内部 <mapper namespace="">的类在一起，当然，使用注解模式的话，Mapper.xml文件就没有必要存在了 -->
		<!-- 直接指定一个包去扫描-内保包含多个Mapper配置- -->
		<!-- <package name="com.bestcxx.stu.springmvc.mapper"/> -->
		<!-- class 级别的指定 -->
		<mapper class="com.bestcxx.stu.springmvc.mapper.UserModelMapper"/>
		<mapper class="com.bestcxx.stu.springmvc.mapper.UserModelTwoMapper"/>
	</mappers>

</configuration>
